################# settings to adjust from here or bashrc  ##############

msCXX ?= g++


ifdef USE_CC
# msCFLAGS += -MMD -MP
else
 msCFLAGS += -std=c++20 -MMD -MP  -Wall
 msLFLAGS += -lstdc++fs
endif


########################### Cross-compile ############################
ifeq "${OPT}" ".exe"
  preCC=x86_64-w64-mingw32-
  msCXX=${preCC}g++-posix
  msCFLAGS += -D_FILE_OFFSET_BITS=64
  msLFLAGS += -static -static-libstdc++ -static-libgcc
  $(info msCXX=$(msCXX))
endif


########################################################################
#################### no need to change here after   ####################

RED := $(shell tput -Txterm setaf 1)
RESET := $(shell tput -Txterm setaf 9)

#link relative path to exe
#msCFLAGS ?= -Wl,-rpath,'$ORIGIN/../lib'

ifndef msSrc  # set msSrc to upper directory if not already set
 msSrc := $(abspath $(lastword $(MAKEFILE_LIST))/../..)
 $(info msSrc set to ${msSrc})
endif

# Use .env file to set msInst, msTstDir and/or msBilDir vars
ifneq ($(wildcard ${msSrc}/.env),)
  include ${msSrc}/.env
endif

# set msBinDir if not set, msInst is also set from .msRoot for .exe OPT
export msInst ?= $(abspath ${msSrc}/..)
export msRoot ?= $(abspath ${msSrc}/..)
export msBinDir ?= ${msInst}/bin
export msLibDir ?= ${msInst}/lib
export msBilDir ?= ${msInst}/build
export msTstDir ?= ${msInst}/test_runs


# set thirdparty pkgs directory if not set
ifndef ms3rd
  ifneq ("$(wildcard ${msRoot}/pkgs/)","")
   ms3rd := ${msRoot}/pkgs
  else
   $(warning ms3rd not set ${ms3rd})
  endif
endif


ifneq ($(MAKECMDGOALS),clean) ############### if not cleaning  ###############:

msReleaseDate ?= \"$(shell date +'%Y.%m.%d')\"


msCFLAGS += -I${msSrc}/include -I${msInst}/include -DRELEASE_DATE=$(msReleaseDate) -D_FILE_OFFSET_BITS=64
msLFLAGS += -L$(msLibDir)


InDir=In $(notdir $(abspath $(dir $(PWD))))/$(notdir $(PWD)): ***


ifeq (${USE_VXIMG},1)
 ifndef USED_VXLIB
   msCFLAGS += -I${msSrc}/libvoxel
 endif
endif


# set libtiff install directory: TIFDIR
ifdef USE_TIFF
 TIFDIR?=${msInst}
 ifneq ("$(wildcard ${TIFDIR}/include/tiff.h)","")
   msCFLAGS += -I${TIFDIR}/include -DTIFLIB
   msLFLAGS += -L${TIFDIR}/libtiff -ltiff -ltiffxx

   ifneq ($(shell ${msCXX} -ljpeg 2>&1 | grep ljpeg > /dev/null; echo $$?),0)
       msLFLAGS += -ljpeg
   #else
     #$(info ignoring jpeg)
   endif

   ifneq ($(shell ${msCXX} -llzma 2>&1 | grep llzma > /dev/null; echo $$?),0)
      msLFLAGS += -llzma
   endif

 else
   $(info $(RED) $(InDir) tiff.h not found in ${TIFDIR}/include, nor in ${msInst}/include/, ignoring USE_TIFF $(RESET))
   $(info $(RED) Hint: maybe run make in top-level directory $(RESET))
 endif
endif



# set zlib directory
# Note: ${ZLIBDIR}/contrib/iostream3/zfstream.h should be installed too
ifdef USE_ZLIB
 ZLIBDIR?=${msInst}
 ifneq ("$(wildcard ${ZLIBDIR}/include/zlib.h)","")
   msCFLAGS += -I${ZLIBDIR}/include -DZLIB
   msLFLAGS += -L${ZLIBDIR}/lib -lz
 else
   $(info $(RED) InstDir: ${msInst}  ${ZLIBDIR}/include/zlib.h, not found, ignoring USE_ZLIB $(RESET))
 endif
endif



# set hypre directory, also gnflow multithreading
ifdef USE_HYPRE
 HYPREDIR=${msInst}
 ifeq ("$(wildcard ${HYPREDIR}/include/HYPRE.h)","")
   HYPREDIR=${ms3rd}/hypre/src/hypre
 endif
 ifneq ("$(wildcard ${HYPREDIR}/include/HYPRE.h)","")
  msCFLAGS += -DHAVE_CONFIG_H -DHYPRE_TIMING -I${HYPREDIR}/include
  msLFLAGS += -pthread  ${HYPREDIR}/lib/libHYPRE.a
 else
   $(info $(InDir))
   $(error HYPREDIR, ${HYPREDIR}/include/HYPRE.h, not found)
 endif
endif



# set hypre directory, also gnflow multithreading -DMULTITHREAD
ifdef USE_HYPRESEQ
 HYPREDIR=${msInst}
 ifeq ("$(wildcard ${HYPREDIR}/include/HYPRE.h)","")
   HYPREDIR=${ms3rd}/hypre/src/hypre
 endif
 ifneq ("$(wildcard ${HYPREDIR}/include/HYPRE.h)","")
  msCFLAGS += -DLIBHYPRE -DHAVE_CONFIG_H -DHYPRE_TIMING -I${HYPREDIR}/include
  msLFLAGS += -pthread  ${HYPREDIR}/lib/libHYPRESeq.a
 else
   $(info $(InDir))
   $(error HYPREDIR, ${HYPREDIR}/include/HYPRE.h, not found)
 endif
endif




# svplot not public domain yet
ifdef USE_SVG
 ifneq ("$(wildcard ${ms3rd}/svplot/svplot.hpp)","")
   msCFLAGS += -I${ms3rd}/svplot -DSVG
 else
   $(info $(InDir) ignoring USE_SVG, ${ms3rd}/svplot/svplot.hpp, not found)
 endif
endif





ifneq "${OPT}" ".exe"
 # set openMP for parallel image processing, mesh generation ...
 # not yet fully integrated with the "released" codes due to portability issues / being experimental
 ifdef USE_OMP
  msCFLAGS += -DOpenMP $(shell mpic++ -showme:compile) -fopenmp
  msLFLAGS += $(shell mpic++ -showme:link)  -fopenmp
 endif
else
 msLFLAGS += -static -lstdc++ -lm   -lstdc++fs
 ifdef USE_OMP
  msCFLAGS += -DOpenMP -fopenmp
  msLFLAGS += -fopenmp
 endif
endif


ifeq ($(USE_XDMF),1)
   msCFLAGS += -I${msSrc}/Xdmf -DXDMF
endif


endif      ###############  if not cleaning  ###############



ifeq "${OPT}" "dbg"
 msCFLAGS += -g -fno-inline  -D_debugCompile_  -D_extraCompile_ ${CFLAGSExtra}
else
 msCFLAGS += -O3  ${CFLAGSExtra}
endif


# check and otherwise set default name for executable
makFilDir:=${CURDIR}
ifndef exec
 exec=$(shell basename ${CURDIR})${OPT}
endif

##### Utilities map between build objects nad source files #####
bildDir ?= ${msBilDir}/${exec}
toBild = $(addprefix ${bildDir}/${1},$(subst /,__,$(subst ..,^^,${2})))
toSorc = $(subst ${bildDir}/${1},,$(subst __,/,$(subst ^^,..,${2})))

################## macro to define build objects ###############
define _AddObjDep
o-$(2) := $(call toBild,${1},$(addsuffix .o,${2}))
objs += $$(o-$(2))
deps += $$(o-$(2):.o=.d)
$$(o-$(2)): $(2)
	@echo 1 $$<
	$(3) -c $$< -o $$@
endef #_AddObjDep
AddObjDep = $(eval $(call _AddObjDep,$(1),$(2),$(3)))
###############################################################


psAppDirs:
	@echo  BuildDir: ${bildDir},   BinDir: ${msBinDir}
	@mkdir -p ${msBinDir}
	@mkdir -p ${msBinDir}/foamx4m
	@mkdir -p ${bildDir}

msLibDirs:
	$(warning  BuildDir: ${bildDir},  LibDir: $(msLibDir))
	@mkdir -p $(msLibDir)
	@mkdir -p ${bildDir}



###############################################################
ifdef USE_MINIFOAMX3
  # TODO: these need furhter testing and clean up
  WM_PRECISION_OPTION ?= DP
  WM_ARCH ?= linux64
  GFLAGS = -DWM_LABEL_SIZE=32

 ifneq ("$(wildcard ${msRoot}/pkgs/foamx4m)","")
  WM_PROJECT_DIR ?= ${ms3rd}/foamx4m
  WM_PROJECT ?= foam
  WM_OSTYPE  ?= POSIX
  SO         ?= ext3.so
  # this could cause conflicts if openfoam is compiled differently:
  WM_MPLIB   ?= SYSTEMOPENMPI
  include $(WM_PROJECT_DIR)/wmake/rules/linux64Gcc/mplib$(WM_MPLIB)
  GFLAGS += -DFOAMX
  OFInsDIR=${msInst}
 else
  $(info WM_PROJECT_DIR= $(WM_PROJECT_DIR))
  WM_PROJECT ?= OpenFOAM
  WM_PROJECT_DIR ?= /opt/openfoam9
  GFLAGS = -DWM_LABEL_SIZE=32
  SO  = so
  OFInsDIR=${WM_PROJECT_DIR}/platforms/${WM_ARCH}${WM_COMPILER}${WM_PRECISION_OPTION}Int${WM_LABEL_SIZE}Opt
  msLFLAGS += -L${OFInsDIR}/lib
  msLFLAGS += -L${OFInsDIR}/lib/openmpi-system -Wl,-rpath=${OFInsDIR}/lib/openmpi-system -l:libPstream.$(SO)
 endif

  LIB_SRC            = $(WM_PROJECT_DIR)/src
  GFLAGS     += -D$(WM_ARCH) -DWM_$(WM_PRECISION_OPTION)

  GFLAGS += -Wall -Wextra -Wno-unused-parameter -Wnon-virtual-dtor  -DNoRepository -ftemplate-depth-200

  msCFLAGS += $(PFLAGS) $(PINC) $(GFLAGS)
  #$(info  using of=$(OFInsDIR) msCFLAGS=$(msCFLAGS) )


  findOFsubdirs = $(shell find $(LIB_SRC)/$(dir) -type d ! -name 'lnInclude' -exec realpath --relative-to . {} \;)
  ofIncDirs = $(foreach dir,$(OFincs) $(WM_PROJECT) OSspecific/$(WM_OSTYPE),$(findOFsubdirs))
  OFCFLAGS += $(addprefix -I,$(ofIncDirs))

  msLFLAGS += $(PLIBS) -Wl,-rpath=${OFInsDIR}/lib  $(addprefix -l:lib,$(addsuffix .$(SO),$(OFlibs) $(WM_PROJECT)))


  objs += $(call toBild,,$(OFCs:.C=.Obj))
  deps += $(call toBild,,$(OFCs:.C=.d))
else
  SO         ?= .so
endif  # USE_MINIFOAMX3
#######################################################:





#########################################################################
### defaults to be included in makefiles by setting USE_msMAKE=1
#########################################################################

#### WARNING: last make should be called from inside source folder  #####



############ run make in subfolders ###################:
ifdef   USE_msRecurse

makls=$(shell find */ -maxdepth 1 -type f | grep -e    /makefile$$     | grep -v [\ \(\)] | grep -v [-]/ | sed s/\\/makefile//g)
makes=$(shell find */ -maxdepth 1 -type f | grep -e    /Makefile$$     | grep -v [\ \(\)] | grep -v [-]/ | sed s/\\/Makefile//g)

recurseMake:
	@$(MAKE) -f ${msSrc}/script/Makefile.in recurseMakeLibs USE_msRecurse=1
	@$(MAKE) -f ${msSrc}/script/Makefile.in recurseMakeExes USE_msRecurse=1
	@printf '\n*  ${makls}  ${makes}  :/ \n\n'

recurseClean: $(addprefix clean_,${makes})
	@printf '\n* $^ :/\n\n'

recurseTest: $(addprefix test_,${makes})
	@printf '\n* $^ :/\n\n'

recurseMakeLibs: $(addprefix make_,${makls})

recurseMakeExes: $(addprefix make_,${makes})

make_%:; @printf '\n$@: \n'
	@(cd  $(@:make_%=%)  && $(MAKE)  USE_msRecurse='')

clean_%:; @printf '\n$@: \n'
	@(cd  $(@:clean_%=%) && $(MAKE) clean  USE_msRecurse='' || echo '  check clean target for $(PWD)/$(@:clean_%=%)' )

test_%:; @printf '\n$@: \n'
	@(cd  $(@:test_%=%) && $(MAKE) test  USE_msRecurse='' || echo '  check test target for $(PWD)/$(@:test_%=%)' )

else
  recurseMake:  ; $(error recurseMake  target requested without USE_msRecurse=1, $^)
  recurseClean: ; $(error recurseClean target requested without USE_msRecurse=1, $^)
  recurseTest:  ; $(error recurseTest  target requested without USE_msRecurse=1, $^)
endif  # USE_msRecurse
#####################################################:





ifdef   USE_SINGLECPP   ################ single-source .cpp app ##################:
 cpp2d := $(addprefix ${bildDir}/,$(subst /,__,$(subst ..,++,$(srcs:.cpp=.d))))
 cpp2o = $(addprefix ${bildDir}/,$(subst /,__,$(subst ..,++,$(@:.cpp=.o))))
 cps2o := $(addprefix ${bildDir}/,$(subst /,__,$(subst ..,++,$(srcs:.cpp=.o))))
 o2cpp = $(subst ${bildDir}/,$(CURDIR)/,$(subst __,/,$(subst ++,..,$(subst .o,.cpp,$@))))

${bildDir}/%.o: $(o2cpp)
	@echo  'Compiling $(o2cpp) *'
	@${msCXX} ${msCFLAGS} -c $(o2cpp)   -o $@

$(srcs): psAppDirs $(cps2o)
	@echo  Building  $(cpp2o) '>> ' $(@:.cpp=${OPT})
	@${msCXX} $(cpp2o)  -o ${msBinDir}/$(@:.cpp=)${OPT} ${msLFLAGS}

-include $(cpp2d)

.PHONY:  clean $(cpp2d)

clean:; $(RM) $(cps2o) $(cpp2d)

endif #  USE_SINGLECPP    #####################################################:



msCmakeFLAGS +=  -DCMAKE_INSTALL_PREFIX=${msInst}

################## compile Cmake app/lib ##################:
ifdef USE_msCMAKE
msCApp:
	@cmake -S$(makFilDir) -B${bildDir} -DmsSrc=${msSrc} $(msCmakeFLAGS);
	(cd ${bildDir} && $(MAKE)        )  || echo ${exec} not built, continuing anyway
	(cd ${bildDir} && $(MAKE) install)  || echo ${exec} not built, continuing anyway
clean: ; cd ${bildDir} && $(MAKE) clean && rm -rf ${bildDir}
else
  msCApp: ; $(error msCApp target should be used togather with USE_msCMAKE=1, $^)
endif # USE_msCMAKE
########################################################:




################ compile single app folder ######################:
ifdef USE_msMAKE
  # recursively include subfolders
  _rI = $(addprefix -I,$(shell find $(1) -type d))

  # convert .cpp file paths to .o, .d and vise versa

  objs += $(call toBild,,$(srcs:.cpp=.o))
  deps += $(call toBild,,$(srcs:.cpp=.d))

msApp: psAppDirs $(objs)
	@echo Building ${CURDIR}  -> ${msBinDir}/${exec}
	@${msCXX}  $(objs) -o ${msBinDir}/${exec} ${msLFLAGS}

msLib: psAppDirs $(objs)
	@mkdir -p $(msLibDir)
	@echo  Building $(msLibDir)/${exec}
	@${msCXX} $(objs) -shared -o $(msLibDir)/lib${exec}.${SO} ${msLFLAGS}

.PHONY: clean ${deps}
-include ${deps}

clean: ; $(RM) $(objs) ${deps}

${bildDir}/%.Obj: $(call toSorc,,$(@:.Obj=.C))
	@echo  'Compiling $(call toSorc,,$(@:.Obj=.C))  *'
	@${msCXX}  ${msCFLAGS} ${OFCFLAGS} ${EXTRACFLAGS} -c $(call toSorc,,$(@:.Obj=.C)) -o $@

${bildDir}/%.o: $(call toSorc,,$(@:.o=.cpp))
	@echo  'Compiling $(call toSorc,,$(@:.o=.cpp))   *'
	@${msCXX}  ${msCFLAGS}  ${EXTRACFLAGS} -c $(call toSorc,,$(@:.o=.cpp)) -o $@

# this is a note only, for how to use nmake in Windows, will not work with complex makefiles
# "c:\Program Files (x86)\Microsoft Visual Studio 12.\VC\bin\amd64_x86\vcvarsamd64_x86.bat"
# nmake
winVS:
	@cl -I..\libf2c /nologo /MT /EHsc /Ox  ${srcs} ..\..\bin\vcf2c.lib  /link -LARGEADDRESSAWARE /out:..\bin\gnflow_VS.exe
	@del *.obj

else
  msApp: ; $(error msApp target should be used togather with USE_msMAKE=1)
endif  #  USE_msMAKE
###########################################################;





ifdef USE_msTEST #################### run tests #################################:

testDir = ${msTstDir}/${exec}
#$(shell basename ${CURDIR})${OPT}
testDirs:
	@mkdir -p ${testDir}

  # t_ is making targets .PHONY (re-run anyway)
  tsts2test = $(addprefix T${testDir}/,$(subst /,__,$(subst ..,++,$(tsts))))
  test2tst = $(subst T${testDir}/,,$(subst __,/,$(subst ++,..,$@)))
  inp2app = $(lastword $(subst _, ,$(subst .sin,,$@)))
  inc2app = $(lastword $(subst _, ,$(subst _, ,$(subst .cc,,$@))))

T${testDir}/%*: $(test2tst)
	cp -r $(test2tst) ${testDir}/

T${testDir}/%.mhd: $(test2tst)
	cp $(test2tst) ${testDir}/
T${testDir}/%.tsv: $(test2tst)
	cp $(test2tst) ${testDir}/
	cp $(test2tst) ${testDir}/
T${testDir}/%__: $(test2tst)
	cp -r $(test2tst) ${testDir}/

T${testDir}/%.sin: $(test2tst)
	@echo detecting app from *_app.sin=="$@": $(inp2app) *** Warning rename file to .cc *****
	$(msSrc)/script/runTest "${testDir}"  $(inp2app) "${CURDIR}/$(test2tst)"  "${msRoot}"

T${testDir}/%.cc: $(test2tst)
	@echo detecting app from *_app.cc=="$@": $(inc2app)
	$(msSrc)/script/runTest "${testDir}"  sindo "${CURDIR}/$(test2tst)"  "${msRoot}"
	@([ "${AddGitHash}" != "yes" ] || mv "${testDir}" "${testDir}"_`git rev-parse --short HEAD`)

T${testDir}/%_gnrun.cc: $(test2tst)
	@echo detecting app from *_gnrun.cc=="$@": $(inc2app)
	$(msSrc)/script/runTest "${testDir}"  $(inc2app) "${CURDIR}/$(test2tst)"  "${msRoot}"

T${testDir}/%.py: $(test2tst)
	echo python3 "${CURDIR}/$(test2tst)"
	$(msSrc)/script/runTest "${testDir}"  python3 "${CURDIR}/$(test2tst)"

T${testDir}/%.cpp: $(test2tst)
	echo ${msCXX}
	${msCXX} -std=c++11 $(test2tst) -o $@
	$(msSrc)/script/runTest "${testDir}"  "${CURDIR}/$@" "${CURDIR}/$(test2tst)"

T${testDir}/%.sh:
	$(msSrc)/script/runTest "${testDir}" "${CURDIR}/$(test2tst)"
#	(cd ${testDir} && $(test2tst))

test: testDirs $(tsts2test)

.PHONY:  clean test
endif  # USE_msTEST #################################################################:
